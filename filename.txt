 1/1: from app import db
 2/1: from app import db
 2/2: from app import db
 2/3: import urllib
 2/4: params = urllib.parse.quote_plus('DRIVER={SQL Server};SERVER=UACVDB01;DATABASE=bays_contacts;Trusted_Connection=no;UID=snadmin;PWD=sysadmin;')
 2/5: SQLALCHEMY_DATABASE_URI = "mssql+pyodbc:///?odbc_connect=%s" % params
 2/6: from app import app
 2/7: app.config['SQLALCHEMY_DATABASE_URI'] = "mssql+pyodbc:///?odbc_connect=%s" % params
 2/8: from flask_sqlalchemy import SQLAlchemy
 2/9: db = SQLAlchemy(app)
2/10:
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)

    def __repr__(self):
        return '<User %r>' % self.username
2/11: db = SQLAlchemy(app)
2/12: db = SQLA(app)
2/13: app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
2/14: db = SQLA(app)
2/15: db = SQLAlchemy(app)
2/16:
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)

    def __repr__(self):
        
        return '<User %r>' % self.username
2/17:
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
2/18:
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
2/19: db
2/20: db --help
2/21: db -help
2/22: db man
2/23: db _Helper
2/24: metadata.tables.keys()
2/25: db.engine.table_names()
2/26: params = urllib.parse.quote_plus('DRIVER={SQL Server};SERVER=UACVDB01\SQL2008EXPRESS;DATABASE=bays_contacts;Trusted_Connection=no;UID=snadmin;PWD=sysadmin;')
2/27: app.config['SQLALCHEMY_DATABASE_URI'] = "mssql+pyodbc:///?odbc_connect=%s" % params
2/28: db = SQLAlchemy(app)
2/29: db.engine.table_names()
 3/1: from app import db
 3/2: app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
 3/3: from app import app
 3/4: app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
 3/5: from app import db
 3/6: db.engine.table_names()
 3/7: db.create_all()
 3/8: from app import User
 3/9: db.engine.table_names()
3/10: from app import user
 4/1: from app import app
 5/1: from app import app
 5/2: app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
 5/3: from app import db
 5/4: from app import User
 5/5: db.engine.table_names()
 5/6: admin = User(username='admin', email='admin@example.com')
 5/7: guest = User(username='guest', email='guest@example.com')
 5/8: db.session.add(admin)
 5/9: db.session.add(guest)
5/10: db.session.commit()
5/11: User.query.all()
5/12: User.query.filter_by(username='admin').first()
5/13: User.query.all()
5/14: User.query.filter_by(username='admin').first()
5/15: db.engine.table_names()
5/16: User.query.all()
5/17: db
5/18: db.engine.table_names()
5/19: User.query.all()
5/20: User.query.all()
5/21: User.query.filter_by(username='admin').first()
5/22: db.session.close()
5/23: User.query.all()
5/24: User
5/25: User.query.all()
5/26: list = [1, 2, 3]
5/27: [e * e for e in list]
5/28: User.query.all()
5/29: [len(e) for e in User.query.all()]
5/30: [len(str(e)) for e in User.query.all()]
5/31: [u.username for u in User.query.all()]
5/32: [(u.id, u.username) for u in User.query.all()]
5/33: [(u.id, u.username, u.email) for u in User.query.all()]
 6/1: from app import app
 6/2: from openpyxl import load_workbook
 6/3: wb = load_workbook(filename='cutting_map.xlsx')
 6/4: sheet = wb['test']
 6/5:
for i in range(1, 24):
    array.append(sheet.cell(row=i, column=2).value)
 6/6: array = []
 6/7:
for i in range(1, 24):
    array.append(sheet.cell(row=i, column=2).value)
 6/8: array
 6/9: from app.models import NumberContacts
6/10: from app import db
6/11: db.create_all()
6/12: db.engine.table_names()
6/13: NumberContacts.query.all()
6/14:
for e in array:
    datas = NumberContacts(description = str(e))
    db.session.add(datas)
6/15: db.session.commit()
6/16: NumberContacts.query.all()
6/17: [(u.id, u.desription) for u in NumberContacts.query.all()]
6/18: [(u.id, u.description) for u in NumberContacts.query.all()]
 7/1: from app import db
 7/2: from app import db
 7/3: from app import db
 7/4: from app import db
 7/5: from app import db
 7/6: from app.models import NumberContacts
 7/7: from app import db
 7/8: from app import db
 7/9: from app import db
7/10: from app import db
7/11: from app import db
7/12: from app import db
7/13: 
 8/1: from app import db
 8/2: from app import db
 8/3: from app import db
 8/4: from app import db
 8/5: from app import db
 8/6: from app import db
 8/7: db.create_all()
 8/8: db.engine.table_names()
 8/9: db.engine.table_names()
 9/1: from app import db
 9/2: db.create_all()
 9/3: db.engine.table_names()
 9/4: from app.models import ContactNumber
 9/5: from app.models import SapNumber
 9/6: c = ContactNumber(description = '12345678')
 9/7: sap = SapNumber(sap_number = '50016871')
10/1: from app import db
10/2: db.create_all()
10/3: db.engine.table_names()
   1: from app import db
   2: db.create_all()
   3: db.engine.table_names()
   4: from app.models import ContactNumber, SapNumber
   5: sap = SapNumber(sap_number = '50016871')
   6: db.session.add(sap)
   7: db.session.commit()
   8: sap = SapNumber(sap_number = '50016872')
   9: db.session.add(sap)
  10: db.session.commit()
  11: contact = ContactNumber(description = '13950501', sap_num = sap)
  12: db.session.add(contact)
  13: db.session.commit()
  14: contact = ContactNumber(description = '10864931', sap_num = sap)
  15: db.session.add(contact)
  16: db.session.commit()
  17: sap = SapNumber.query.filter_by(sap_number = '50016872').first()
  18: sap
  19: sap.id
  20: sap.sap_num
  21: sap.sap_number
  22: sap.sap_num
  23: sap.contacts
  24: %history -g -f filename.txt


 for i in range(3, 871):
    ...:     sap_num = SapNumber(sap_number = str(sheet.cell(row = i, column = 1).value))
    ...:     con1 = ContactNumber(description = str(sheet.cell(row = i, column = 2).value))
    ...:     con2 = ContactNumber(description = str(sheet.cell(row = i, column = 3).value))
    ...:     if (len(con1.description)==8):
    ...:         sap_num.contacts.append(con1)
    ...:     if (len(con2.description)==8):
    ...:         sap_num.contacts.append(con2)
    ...:     db.session.add(sap_num)

